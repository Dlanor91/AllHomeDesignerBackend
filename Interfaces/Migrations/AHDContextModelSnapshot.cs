// <auto-generated />
using System;
using Interfaces.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructura.Migrations
{
    [DbContext(typeof(AHDContext))]
    partial class AHDContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.Categoria", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("Categoria", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ClienteRegistro", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("documentoCliente")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("documentoProfesional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rucEmpresa")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("rucFilial")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("documentoCliente");

                    b.HasIndex("rucEmpresa");

                    b.HasIndex("rucFilial");

                    b.ToTable("ClienteRegistro", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Departamento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("Departamento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Direccion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("calle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("codigoSucursal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("complemento")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("datos")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("departamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("documentoPersona")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("idLocalidad")
                        .HasColumnType("int");

                    b.Property<int>("nroPuerta")
                        .HasColumnType("int");

                    b.Property<string>("rucEmpresa")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("documentoPersona");

                    b.HasIndex("idLocalidad");

                    b.HasIndex("rucEmpresa");

                    b.ToTable("Direccion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Empresa", b =>
                {
                    b.Property<string>("ruc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("comentarios")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("idTipoUsuario")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("razonSocial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ruc");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("idTipoUsuario");

                    b.HasIndex("razonSocial")
                        .IsUnique();

                    b.HasIndex("ruc")
                        .IsUnique();

                    b.ToTable("Empresa", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Filial", b =>
                {
                    b.Property<string>("ruc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("estado")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("fechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ruc");

                    b.ToTable("Filial", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Localidad", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("idDepartamento")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("idDepartamento");

                    b.ToTable("Localidad", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Mensaje", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mensaje")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Mensaje", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Modelo", b =>
                {
                    b.Property<string>("codigo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("personaCliente")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("personaUsuario")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("codigo");

                    b.HasIndex("personaCliente");

                    b.HasIndex("personaUsuario");

                    b.ToTable("Modelo", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ModeloCliente", b =>
                {
                    b.Property<string>("documentoCliente")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("codigoModelo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.HasKey("documentoCliente", "codigoModelo");

                    b.HasIndex("codigoModelo");

                    b.ToTable("ModeloCliente", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Moneda", b =>
                {
                    b.Property<string>("codigo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<float>("cotizacion")
                        .HasColumnType("real");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("date");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("simbolo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("codigo");

                    b.ToTable("Moneda", (string)null);
                });

            modelBuilder.Entity("Core.Entities.OrdenReserva", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<string>("codigoModelo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("codigoProducto")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("codigoReservaProducto")
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("precioFinal")
                        .HasColumnType("real");

                    b.Property<float>("precioProducto")
                        .HasColumnType("real");

                    b.Property<string>("rucProveedor")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("simboloMoneda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("codigoModelo");

                    b.HasIndex("codigoReservaProducto");

                    b.HasIndex("codigoProducto", "rucProveedor");

                    b.ToTable("OrdenReserva", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Persona", b =>
                {
                    b.Property<string>("documento")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("codigoSucursal")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("idTipoUsuario")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("nombreUsuario")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("password")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("documento");

                    b.HasIndex("codigoSucursal");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("idTipoUsuario");

                    b.HasIndex("nombreUsuario")
                        .IsUnique()
                        .HasFilter("[nombreUsuario] IS NOT NULL");

                    b.ToTable("Persona", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Precio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("codigoMoneda")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("codigoProducto")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("date");

                    b.Property<float>("iva")
                        .HasColumnType("real");

                    b.Property<float>("precioFinal")
                        .HasColumnType("real");

                    b.Property<float>("precioLista")
                        .HasColumnType("real");

                    b.Property<float>("precioVenta")
                        .HasColumnType("real");

                    b.Property<string>("rucProveedor")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("codigoMoneda");

                    b.HasIndex("codigoProducto", "rucProveedor");

                    b.ToTable("Precio", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Privilegio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("tipo")
                        .IsUnique();

                    b.ToTable("Privilegio", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Producto", b =>
                {
                    b.Property<string>("codigo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("rucProveedor")
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("ancho")
                        .HasColumnType("real");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("disponibilidad")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("idCategoria")
                        .HasColumnType("int");

                    b.Property<string>("imagen")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("largo")
                        .HasColumnType("real");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("presentacion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("profundidad")
                        .HasColumnType("real");

                    b.Property<float?>("rendimiento")
                        .HasMaxLength(100)
                        .HasColumnType("real");

                    b.Property<int>("reserva")
                        .HasColumnType("int");

                    b.Property<string>("rucFilial")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("stock")
                        .HasColumnType("int");

                    b.Property<string>("sugerencias")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("textura")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("codigo", "rucProveedor");

                    b.HasIndex("idCategoria");

                    b.HasIndex("rucFilial");

                    b.HasIndex("rucProveedor");

                    b.ToTable("Producto", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Proveedor", b =>
                {
                    b.Property<string>("ruc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ruc");

                    b.ToTable("Proveedor", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ReservaProductos", b =>
                {
                    b.Property<string>("codigo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("documentoCliente")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("documentoProfesional")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("fechaCompra")
                        .HasColumnType("datetime2");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("rucEmpresa")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("rucFilial")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("codigo");

                    b.HasIndex("documentoCliente");

                    b.HasIndex("documentoProfesional");

                    b.HasIndex("rucEmpresa");

                    b.HasIndex("rucFilial");

                    b.ToTable("ReservaProductos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Sucursal", b =>
                {
                    b.Property<string>("codigo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("detalles")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("fechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("idDireccion")
                        .HasColumnType("int");

                    b.Property<int?>("idTelefono")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("rucFilial")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("codigo");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("idDireccion")
                        .IsUnique()
                        .HasFilter("[idDireccion] IS NOT NULL");

                    b.HasIndex("rucFilial");

                    b.ToTable("Sucursal", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Telefono", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("codigoSucursal")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("documentoPersona")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("rucEmpresa")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("codigoSucursal")
                        .IsUnique()
                        .HasFilter("[codigoSucursal] IS NOT NULL");

                    b.HasIndex("documentoPersona");

                    b.HasIndex("rucEmpresa");

                    b.ToTable("Telefono", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoUsuario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("descripcionRol")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("rol")
                        .IsUnique();

                    b.ToTable("TipoUsuario", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoUsuarioPrivilegio", b =>
                {
                    b.Property<int>("idPrivilegio")
                        .HasColumnType("int");

                    b.Property<int>("idTipoUsuario")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.HasKey("idPrivilegio", "idTipoUsuario");

                    b.HasIndex("idTipoUsuario");

                    b.HasIndex("idPrivilegio", "idTipoUsuario")
                        .IsUnique();

                    b.ToTable("TipoUsuarioPrivilegio", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ClienteRegistro", b =>
                {
                    b.HasOne("Core.Entities.Persona", "cliente")
                        .WithMany("clientesProfesionales")
                        .HasForeignKey("documentoCliente");

                    b.HasOne("Core.Entities.Empresa", "empresa")
                        .WithMany("vendedoresServicios")
                        .HasForeignKey("rucEmpresa");

                    b.HasOne("Core.Entities.Filial", "filial")
                        .WithMany("clientesFiliales")
                        .HasForeignKey("rucFilial");

                    b.Navigation("cliente");

                    b.Navigation("empresa");

                    b.Navigation("filial");
                });

            modelBuilder.Entity("Core.Entities.Direccion", b =>
                {
                    b.HasOne("Core.Entities.Persona", "persona")
                        .WithMany("direcciones")
                        .HasForeignKey("documentoPersona");

                    b.HasOne("Core.Entities.Localidad", "localidad")
                        .WithMany("direcciones")
                        .HasForeignKey("idLocalidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Empresa", "empresa")
                        .WithMany("direcciones")
                        .HasForeignKey("rucEmpresa");

                    b.Navigation("empresa");

                    b.Navigation("localidad");

                    b.Navigation("persona");
                });

            modelBuilder.Entity("Core.Entities.Empresa", b =>
                {
                    b.HasOne("Core.Entities.TipoUsuario", "tipoUsuario")
                        .WithMany("empresas")
                        .HasForeignKey("idTipoUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tipoUsuario");
                });

            modelBuilder.Entity("Core.Entities.Localidad", b =>
                {
                    b.HasOne("Core.Entities.Departamento", "departamento")
                        .WithMany("localidades")
                        .HasForeignKey("idDepartamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("departamento");
                });

            modelBuilder.Entity("Core.Entities.Modelo", b =>
                {
                    b.HasOne("Core.Entities.Persona", "cliente")
                        .WithMany("modelosCliente")
                        .HasForeignKey("personaCliente");

                    b.HasOne("Core.Entities.Persona", "usuario")
                        .WithMany("modelosUsuarios")
                        .HasForeignKey("personaUsuario");

                    b.Navigation("cliente");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Core.Entities.ModeloCliente", b =>
                {
                    b.HasOne("Core.Entities.Modelo", "modelo")
                        .WithMany("modelosCodigosGenerados")
                        .HasForeignKey("codigoModelo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Persona", "personaCliente")
                        .WithMany("modelosClienteGenerados")
                        .HasForeignKey("documentoCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("modelo");

                    b.Navigation("personaCliente");
                });

            modelBuilder.Entity("Core.Entities.OrdenReserva", b =>
                {
                    b.HasOne("Core.Entities.Modelo", "modelo")
                        .WithMany("ordenesReservaModelo")
                        .HasForeignKey("codigoModelo");

                    b.HasOne("Core.Entities.ReservaProductos", "reservaProductos")
                        .WithMany("ordenesReservas")
                        .HasForeignKey("codigoReservaProducto");

                    b.HasOne("Core.Entities.Producto", "producto")
                        .WithMany("ordenesReservaProducto")
                        .HasForeignKey("codigoProducto", "rucProveedor");

                    b.Navigation("modelo");

                    b.Navigation("producto");

                    b.Navigation("reservaProductos");
                });

            modelBuilder.Entity("Core.Entities.Persona", b =>
                {
                    b.HasOne("Core.Entities.Sucursal", "sucursal")
                        .WithMany("trabajadores")
                        .HasForeignKey("codigoSucursal");

                    b.HasOne("Core.Entities.TipoUsuario", "tipoUsuario")
                        .WithMany("personas")
                        .HasForeignKey("idTipoUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sucursal");

                    b.Navigation("tipoUsuario");
                });

            modelBuilder.Entity("Core.Entities.Precio", b =>
                {
                    b.HasOne("Core.Entities.Moneda", "moneda")
                        .WithMany("precios")
                        .HasForeignKey("codigoMoneda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Producto", "producto")
                        .WithMany("precios")
                        .HasForeignKey("codigoProducto", "rucProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("moneda");

                    b.Navigation("producto");
                });

            modelBuilder.Entity("Core.Entities.Producto", b =>
                {
                    b.HasOne("Core.Entities.Categoria", "categoria")
                        .WithMany("productos")
                        .HasForeignKey("idCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Filial", "filial")
                        .WithMany("productos")
                        .HasForeignKey("rucFilial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Proveedor", "proveedor")
                        .WithMany("productos")
                        .HasForeignKey("rucProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categoria");

                    b.Navigation("filial");

                    b.Navigation("proveedor");
                });

            modelBuilder.Entity("Core.Entities.ReservaProductos", b =>
                {
                    b.HasOne("Core.Entities.Persona", "cliente")
                        .WithMany("reservaProductosClientes")
                        .HasForeignKey("documentoCliente");

                    b.HasOne("Core.Entities.Persona", "profesional")
                        .WithMany("reservaProductosProfesionales")
                        .HasForeignKey("documentoProfesional");

                    b.HasOne("Core.Entities.Empresa", "empresa")
                        .WithMany("reservaProductos")
                        .HasForeignKey("rucEmpresa");

                    b.HasOne("Core.Entities.Filial", "filial")
                        .WithMany("reservaProductos")
                        .HasForeignKey("rucFilial");

                    b.Navigation("cliente");

                    b.Navigation("empresa");

                    b.Navigation("filial");

                    b.Navigation("profesional");
                });

            modelBuilder.Entity("Core.Entities.Sucursal", b =>
                {
                    b.HasOne("Core.Entities.Direccion", "direccion")
                        .WithOne("sucursal")
                        .HasForeignKey("Core.Entities.Sucursal", "idDireccion");

                    b.HasOne("Core.Entities.Filial", "filial")
                        .WithMany("sucursales")
                        .HasForeignKey("rucFilial");

                    b.Navigation("direccion");

                    b.Navigation("filial");
                });

            modelBuilder.Entity("Core.Entities.Telefono", b =>
                {
                    b.HasOne("Core.Entities.Sucursal", "sucursal")
                        .WithOne("telefono")
                        .HasForeignKey("Core.Entities.Telefono", "codigoSucursal");

                    b.HasOne("Core.Entities.Persona", "persona")
                        .WithMany("telefonos")
                        .HasForeignKey("documentoPersona");

                    b.HasOne("Core.Entities.Empresa", "empresa")
                        .WithMany("telefonos")
                        .HasForeignKey("rucEmpresa");

                    b.Navigation("empresa");

                    b.Navigation("persona");

                    b.Navigation("sucursal");
                });

            modelBuilder.Entity("Core.Entities.TipoUsuarioPrivilegio", b =>
                {
                    b.HasOne("Core.Entities.Privilegio", "privilegioTipoUsuario")
                        .WithMany("privilegiosTiposUsuarios")
                        .HasForeignKey("idPrivilegio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoUsuario", "tipoUsuarioPrivilegios")
                        .WithMany("tiposUsuariosPrivilegios")
                        .HasForeignKey("idTipoUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("privilegioTipoUsuario");

                    b.Navigation("tipoUsuarioPrivilegios");
                });

            modelBuilder.Entity("Core.Entities.Categoria", b =>
                {
                    b.Navigation("productos");
                });

            modelBuilder.Entity("Core.Entities.Departamento", b =>
                {
                    b.Navigation("localidades");
                });

            modelBuilder.Entity("Core.Entities.Direccion", b =>
                {
                    b.Navigation("sucursal");
                });

            modelBuilder.Entity("Core.Entities.Empresa", b =>
                {
                    b.Navigation("direcciones");

                    b.Navigation("reservaProductos");

                    b.Navigation("telefonos");

                    b.Navigation("vendedoresServicios");
                });

            modelBuilder.Entity("Core.Entities.Filial", b =>
                {
                    b.Navigation("clientesFiliales");

                    b.Navigation("productos");

                    b.Navigation("reservaProductos");

                    b.Navigation("sucursales");
                });

            modelBuilder.Entity("Core.Entities.Localidad", b =>
                {
                    b.Navigation("direcciones");
                });

            modelBuilder.Entity("Core.Entities.Modelo", b =>
                {
                    b.Navigation("modelosCodigosGenerados");

                    b.Navigation("ordenesReservaModelo");
                });

            modelBuilder.Entity("Core.Entities.Moneda", b =>
                {
                    b.Navigation("precios");
                });

            modelBuilder.Entity("Core.Entities.Persona", b =>
                {
                    b.Navigation("clientesProfesionales");

                    b.Navigation("direcciones");

                    b.Navigation("modelosCliente");

                    b.Navigation("modelosClienteGenerados");

                    b.Navigation("modelosUsuarios");

                    b.Navigation("reservaProductosClientes");

                    b.Navigation("reservaProductosProfesionales");

                    b.Navigation("telefonos");
                });

            modelBuilder.Entity("Core.Entities.Privilegio", b =>
                {
                    b.Navigation("privilegiosTiposUsuarios");
                });

            modelBuilder.Entity("Core.Entities.Producto", b =>
                {
                    b.Navigation("ordenesReservaProducto");

                    b.Navigation("precios");
                });

            modelBuilder.Entity("Core.Entities.Proveedor", b =>
                {
                    b.Navigation("productos");
                });

            modelBuilder.Entity("Core.Entities.ReservaProductos", b =>
                {
                    b.Navigation("ordenesReservas");
                });

            modelBuilder.Entity("Core.Entities.Sucursal", b =>
                {
                    b.Navigation("telefono");

                    b.Navigation("trabajadores");
                });

            modelBuilder.Entity("Core.Entities.TipoUsuario", b =>
                {
                    b.Navigation("empresas");

                    b.Navigation("personas");

                    b.Navigation("tiposUsuariosPrivilegios");
                });
#pragma warning restore 612, 618
        }
    }
}
